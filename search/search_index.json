{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SSO &amp; Spring  : cr\u00e9ez une authentification centralis\u00e9e de A \u00e0 Z","text":""},{"location":"#sequence-0","title":"S\u00e9quence 0","text":"<p>Vid\u00e9o d\u2019introduction pr\u00e9sentant l\u2019\u00e9quipe, le sujet du cours, le d\u00e9roul\u00e9 g\u00e9n\u00e9ral et les objectifs p\u00e9dagogiques</p>"},{"location":"#sequence-1","title":"S\u00e9quence 1","text":"<p>QCM d\u2019\u00e9valuation (test de positionnement) sur les bases de Java, Spring...</p> <p>Rappels des fondamentaux Java : syntaxe, classes, m\u00e9thodes, types...</p>"},{"location":"#sequence-2","title":"S\u00e9quence 2","text":"<p>Installation et configuration de Docker</p> <p>Cr\u00e9ation d\u2019un projet Spring Boot</p>"},{"location":"sequences/s0/","title":"SSO &amp; Spring  : cr\u00e9ez une authentification centralis\u00e9e de A \u00e0 Z","text":"<p>Bienvenue dans ce cours o\u00f9 l\u2019objectif est de mettre en place une application oauth2 s\u00e9curis\u00e9e, autrement dit un SSO (single sign-on).</p> <p>Vous serez accompagn\u00e9s par :</p> <ul> <li> <p>Mathys Farineau</p> </li> <li> <p>Alan Sapet</p> </li> <li> <p>L\u00e9o Deroin</p> </li> </ul>"},{"location":"sequences/s0/#objectifs-du-cours","title":"Objectifs du cours","text":"<p>\u00c0 la fin du cours, vous serez capables de :</p> <ul> <li>D\u00e9velopper une application backend compl\u00e8te avec Spring Boot</li> <li>G\u00e9rer une base de donn\u00e9es MySQL avec Hibernate</li> <li>Mettre en place une authentification s\u00e9curis\u00e9e avec Spring Security et OAuth2 (SSO)</li> </ul>"},{"location":"sequences/s0/#contenu","title":"Contenu","text":"<p>Voici les grandes \u00e9tapes que nous allons suivre ensemble :</p> <ol> <li>Revoir les bases de Java pour partir sur de bonnes fondations</li> <li>Installer et configurer Docker</li> <li>Cr\u00e9er un projet Spring Boot et structurer l\u2019architecture</li> <li>Travailler avec une base de donn\u00e9es MySQL avec Hibernate</li> <li>S\u00e9curiser l\u2019application avec Spring Security et ajouter un SSO</li> <li>Connecter l\u2019application au frontend (React ou Vue.js)</li> <li>Exercices pratiques, un QCM final et un mini-projet pour valider les acquis</li> </ol>"},{"location":"sequences/s0/#outils","title":"Outils","text":"<p>Pendant la formation, nous allons utiliser :</p> <ul> <li>IntelliJ IDEA pour coder en Java</li> <li>Docker pour g\u00e9rer nos environnements</li> <li>GitHub pour versionner et partager le code</li> <li>Postman pour tester les API (si besoin)</li> </ul>"},{"location":"sequences/s1/fondamentaux/","title":"\ud83d\udcd8 Rappels des fondamentaux en Java","text":"<p>Bienvenue dans cette premi\u00e8re partie de la formation. Avant de plonger dans la cr\u00e9ation d\u2019un SSO avec Spring Boot, il est indispensable de r\u00e9viser ensemble les bases de Java. Ce rappel a pour but de s\u2019assurer que tout le monde ma\u00eetrise la syntaxe, la logique objet et les outils n\u00e9cessaires.</p>"},{"location":"sequences/s1/fondamentaux/#objectifs","title":"Objectifs","text":"<p>\u00c0 la fin de ce module, vous serez capable de :</p> <ul> <li>Expliquer ce qu\u2019est Java et son origine</li> <li>Comprendre la syntaxe de base (variables, conditions, boucles)</li> <li>Manipuler des classes, objets, attributs et m\u00e9thodes</li> </ul>"},{"location":"sequences/s1/fondamentaux/#introduction-a-java","title":"Introduction \u00e0 Java","text":""},{"location":"sequences/s1/fondamentaux/#la-programmation-orientee-objet-poo","title":"La Programmation Orient\u00e9e Objet (POO)","text":""},{"location":"sequences/s1/fondamentaux/#ressources-necessaires","title":"\ud83d\udcda Ressources n\u00e9cessaires","text":"<ul> <li>IDE : IntelliJ IDEA (Community ou Ultimate)</li> <li>JDK : version 21</li> <li>Documentation officielle : https://docs.oracle.com/en/java/</li> </ul>"},{"location":"sequences/s1/fondamentaux/introduction/","title":"Introduction","text":""},{"location":"sequences/s1/fondamentaux/introduction/#introduction-a-java","title":"Introduction \u00e0 Java","text":"<p>Java est un langage de programmation orient\u00e9 objet, cr\u00e9\u00e9 en 1995 par James Gosling chez Sun Microsystems (aujourd\u2019hui propri\u00e9t\u00e9 d\u2019Oracle). Son slogan : \"Write once, run anywhere\" (\u00c9cris une fois, ex\u00e9cute partout).</p> <p>Aujourd\u2019hui, Java est massivement utilis\u00e9 dans :</p> <ul> <li>Les applications d\u2019entreprise (banques, assurances, e-commerce\u2026)</li> <li>Le d\u00e9veloppement web (via Spring, Jakarta EE\u2026)</li> <li>Les applications mobiles Android</li> <li>Certains syst\u00e8mes embarqu\u00e9s et logiciels bureautiques</li> </ul> <p>Contrairement \u00e0 des langages compil\u00e9s directement en langage machine (comme le C ou le C++), Java passe par une \u00e9tape interm\u00e9diaire :</p> <ol> <li>Le code source est compil\u00e9 en bytecode (<code>.class</code>)</li> <li>Ce bytecode est ensuite ex\u00e9cut\u00e9 par la JVM (Java Virtual Machine)</li> </ol> <p>Ainsi programme \u00e9crit une fois peut tourner sur Windows, Linux, macOS, Android\u2026 sans modification. C\u2019est ce qui a fait la force du langage depuis ses d\u00e9buts.</p>"},{"location":"sequences/s1/fondamentaux/introduction/#caracteristiques-principales","title":"Caract\u00e9ristiques principales","text":"<ul> <li>Orient\u00e9 objet : tout est pens\u00e9 autour de classes et d\u2019objets</li> <li>Fortement typ\u00e9 : chaque variable doit avoir un type pr\u00e9cis</li> <li>S\u00e9curis\u00e9 : la JVM emp\u00eache de nombreuses erreurs (acc\u00e8s m\u00e9moire non autoris\u00e9, etc.)</li> <li>Tr\u00e8s utilis\u00e9 : une \u00e9norme communaut\u00e9 et de nombreux frameworks (comme Spring Boot)</li> </ul>"},{"location":"sequences/s1/fondamentaux/introduction/#syntaxe-de-base-en-java","title":"\ud83d\udcdd Syntaxe de base en Java","text":""},{"location":"sequences/s1/fondamentaux/introduction/#structure-minimale-dun-programme-java","title":"Structure minimale d\u2019un programme Java","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}\n</code></pre> <ul> <li><code>public class Main</code> -&gt; D\u00e9claration d\u2019une classe (ici, la classe <code>Main</code>)</li> <li><code>public static void main(String[] args)</code> -&gt; Point d\u2019entr\u00e9e du programme Java</li> <li><code>System.out.println()</code> -&gt; Affiche du texte dans la console</li> </ul>"},{"location":"sequences/s1/fondamentaux/introduction/#detail-de-la-methode-main","title":"D\u00e9tail de la m\u00e9thode <code>main</code>","text":"<p>Explication de la ligne :</p> <pre><code>public static void main(String[] args)\n</code></pre> <ul> <li> <p><code>public</code> : c\u2019est un modificateur d\u2019acc\u00e8s.   Cela signifie que la m\u00e9thode <code>main</code> est accessible partout (y compris par la JVM lorsqu\u2019elle d\u00e9marre le programme).</p> </li> <li> <p><code>static</code> : cela indique que la m\u00e9thode appartient \u00e0 la classe et non \u00e0 un objet sp\u00e9cifique.   Autrement dit, on peut ex\u00e9cuter <code>main</code> sans cr\u00e9er d\u2019instance de la classe <code>Main</code>.</p> </li> <li> <p><code>void</code> : c\u2019est le type de retour de la m\u00e9thode.   Ici, <code>void</code> signifie que la m\u00e9thode ne retourne rien.</p> </li> <li> <p><code>String[] args</code> : param\u00e8tre de la m\u00e9thode, qui correspond \u00e0 un tableau de cha\u00eenes de caract\u00e8res.   Il permet de passer des arguments au programme depuis la ligne de commande.</p> </li> </ul>"},{"location":"sequences/s1/fondamentaux/introduction/#variables-et-types","title":"\ud83d\udd24 Variables et types","text":"<p>Java est un langage fortement typ\u00e9 et statiquement typ\u00e9, cela signifie que chaque variable doit avoir un type d\u00e9fini \u00e0 la compilation, et ce type ne peut pas changer ensuite.</p> <p>Voici quelques exemples de d\u00e9claration de variables en Java :</p> <pre><code>int age = 21;          // entier\ndouble poids = 75.5;   // nombre \u00e0 virgule flottante\nboolean isActive = true; // bool\u00e9en\nString nom = \"Jean\";   // cha\u00eene de caract\u00e8res\n</code></pre> <p>Java fournit des types primitifs int\u00e9gr\u00e9s au langage, qui repr\u00e9sentent les valeurs les plus simples.</p> <p>Exemples :</p> <ul> <li><code>int</code> -&gt; nombre entier (ex : 42)</li> <li><code>double</code> -&gt; nombre d\u00e9cimal (ex : 3.14)</li> <li><code>boolean</code> -&gt; valeur logique (true / false)</li> <li><code>char</code> -&gt; un seul caract\u00e8re (ex : <code>'A'</code>)</li> </ul> <p>\u00c0 c\u00f4t\u00e9 des primitifs, Java propose aussi des classes qui servent de types. Exemple :</p> <ul> <li><code>String</code> -&gt; repr\u00e9sente une cha\u00eene de caract\u00e8res (ex : <code>\"Bonjour\"</code>)</li> </ul>"},{"location":"sequences/s1/fondamentaux/introduction/#conditions","title":"\ud83d\udd00 Conditions","text":"<pre><code>int age = 18;\n\nif (age &gt;= 18) {\n    System.out.println(\"Majeur\");\n} else {\n    System.out.println(\"Mineur\");\n}\n</code></pre> <p>On peut tester plusieurs cas diff\u00e9rents gr\u00e2ce \u00e0 <code>else if</code> :</p> <pre><code>int note = 15;\n\nif (note &gt;= 16) {\n    System.out.println(\"Tr\u00e8s bien\");\n} else if (note &gt;= 12) {\n    System.out.println(\"Assez bien\");\n} else if (note &gt;= 10) {\n    System.out.println(\"Passable\");\n} else {\n    System.out.println(\"\u00c9chec\");\n}\n</code></pre> <p>Pour les cas simples, on peut utiliser l\u2019op\u00e9rateur ternaire <code>? :</code> :</p> <pre><code>int age = 20;\nString statut = (age &gt;= 18) ? \"Majeur\" : \"Mineur\";\nSystem.out.println(statut);\n</code></pre>"},{"location":"sequences/s1/fondamentaux/introduction/#boucles","title":"\ud83d\udd01 Boucles","text":"<p>La boucle <code>for</code> est utilis\u00e9e lorsqu\u2019on sait \u00e0 l\u2019avance combien de fois on veut r\u00e9p\u00e9ter une action.</p> <pre><code>for (int i = 0; i &lt; 5; i++) {\n    System.out.println(\"i = \" + i);\n}\n</code></pre> <p>D\u00e9composition :</p> <ul> <li><code>int i = 0</code> -&gt; initialisation (variable de d\u00e9part)</li> <li><code>i &lt; 5</code> -&gt; condition de poursuite</li> <li><code>i++</code> -&gt; incr\u00e9mentation \u00e0 chaque tour</li> </ul> <p>Ici, le programme affiche <code>i</code> de 0 \u00e0 4.</p> <p>La boucle <code>while</code> s\u2019ex\u00e9cute tant que la condition est vraie.</p> <pre><code>int j = 0;\nwhile (j &lt; 5) {\n    System.out.println(\"j = \" + j);\n    j++;\n}\n</code></pre> <p>Ici, la boucle continue tant que <code>j &lt; 5</code>.</p> <p>Le parcours de collection</p> <pre><code>String[] fruits = {\"Pomme\", \"Banane\", \"Orange\"};\n\nfor (String fruit : fruits) {\n    System.out.println(fruit);\n}\n</code></pre> <p>Ici, la boucle parcourt chaque \u00e9l\u00e9ment du tableau sans se soucier de l\u2019index.</p>"},{"location":"sequences/s1/fondamentaux/poo/","title":"Poo","text":""},{"location":"sequences/s1/fondamentaux/poo/#la-programmation-orientee-objet-poo","title":"La Programmation Orient\u00e9e Objet (POO)","text":"<p>Java est orient\u00e9 objet, ce qui signifie qu\u2019on structure le code avec des classes et des objets pour repr\u00e9senter des concepts r\u00e9els.</p>"},{"location":"sequences/s1/fondamentaux/poo/#exemple-de-classes-et-objets","title":"Exemple de classes et objets","text":"<pre><code>public class Brand {\n    private String name;\n    private String country;\n\n    // Constructor\n    public Brand(String name, String country) {\n        this.name = name;\n        this.country = country;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n\n    // toString method\n    @Override\n    public String toString() {\n        return name + \" (\" + country + \")\";\n    }\n}\n\npublic class Car {\n    private Brand brand;\n    private int year;\n\n    // Constructor\n    public Car(Brand brand, int year) {\n        this.brand = brand;\n        this.year = year;\n    }\n\n    // Getters and setters\n    public Brand getBrand() {\n        return brand;\n    }\n\n    public void setBrand(Brand brand) {\n        this.brand = brand;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public void setYear(int year) {\n        this.year = year;\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Car: \" + brand.toString() + \", Year: \" + year);\n    }\n}\n</code></pre>"},{"location":"sequences/s1/fondamentaux/poo/#utilisation-des-classes","title":"Utilisation des classes","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        Brand Renault = new Brand(\"Renault\", \"FRANCE\");\n        Car clio = new Car(Renault, 2020);\n\n        clio.displayInfo(); // Affiche : Car: Renault (FRANCE), Year: 2020\n    }\n}\n</code></pre>"},{"location":"sequences/s1/fondamentaux/poo/#packages","title":"\ud83d\udce6 Packages","text":"<p>Un package permet d\u2019organiser et ranger les classes dans un projet. La diff\u00e9rence avec un dossier classique est que le package fait partie du nom complet de la classe, ainsi on \u00e9vite les conflits de noms.</p> <pre><code>package com.fyc.sso;\n\npublic class User {\n    private String name;\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n</code></pre>"},{"location":"sequences/s1/fondamentaux/poo/#exercice-pratique-30-min-gestion-dune-bibliotheque","title":"Exercice pratique (30 min) : Gestion d\u2019une biblioth\u00e8que","text":"<p>Dans cet exercice, vous allez cr\u00e9er un petit syst\u00e8me pour g\u00e9rer une biblioth\u00e8que, en utilisant les concepts de POO : classes, objets, attributs et m\u00e9thodes.</p>"},{"location":"sequences/s1/fondamentaux/poo/#etapes","title":"\u00c9tapes","text":"<ol> <li> <p>Cr\u00e9er une classe <code>Author</code></p> <ul> <li>Attributs :<ul> <li><code>name</code> (String) -&gt; nom de l\u2019auteur</li> <li><code>country</code> (String) -&gt; pays d\u2019origine</li> </ul> </li> <li>M\u00e9thodes :<ul> <li>Constructeur</li> <li>Getters et setters</li> <li><code>toString()</code> -&gt; retourne <code>\"name (country)\"</code></li> </ul> </li> </ul> </li> <li> <p>Cr\u00e9er une classe <code>Book</code></p> <ul> <li>Attributs :<ul> <li><code>title</code> (String) -&gt; titre du livre</li> <li><code>author</code> (Author) -&gt; auteur du livre</li> <li><code>year</code> (int) -&gt; ann\u00e9e de publication</li> </ul> </li> <li>M\u00e9thodes :<ul> <li>Constructeur</li> <li>Getters et setters</li> <li><code>displayInfo()</code> -&gt; affiche <code>\"Title: &lt;title&gt;, Author: &lt;author&gt;, Year: &lt;year&gt;\"</code></li> </ul> </li> </ul> </li> <li> <p>Cr\u00e9er une classe <code>Library</code></p> <ul> <li>Attributs :<ul> <li><code>name</code> (String) -&gt; nom de la biblioth\u00e8que</li> <li><code>books</code> (ArrayList) -&gt; liste des livres <li>M\u00e9thodes :<ul> <li><code>addBook(Book book)</code> -&gt; ajoute un livre \u00e0 la liste</li> <li><code>removeBook(Book book)</code> -&gt; supprime un livre \u00e0 la liste</li> <li><code>displayBooks()</code> -&gt; affiche tous les livres</li> <li><code>findBooksByAuthor(String authorName)</code> -&gt; affiche tous les livres d\u2019un auteur donn\u00e9</li> <li>Bonus : <code>displayBooksAfterYear(int year)</code> -&gt; affiche les livres publi\u00e9s apr\u00e8s une certaine ann\u00e9e</li> </ul> </li> <li> <p>Cr\u00e9er quelques objets <code>Author</code> et <code>Book</code></p> <ul> <li>Exemple :<ul> <li>Authors : <code>\"J.K. Rowling\" (UK)</code>, <code>\"George Orwell\" (UK)</code>, <code>\"Haruki Murakami\" (Japan)</code></li> <li>Books : <code>\"Harry Potter\"</code> (Rowling, 1997), <code>\"1984\"</code> (Orwell, 1949), <code>\"Kafka on the Shore\"</code> (Murakami, 2002)</li> </ul> </li> </ul> </li> <li> <p>Cr\u00e9er un objet <code>Library</code></p> <ul> <li>Ajouter tous les livres cr\u00e9\u00e9s</li> <li>Afficher tous les livres</li> <li>Afficher uniquement les livres d\u2019un auteur pr\u00e9cis</li> <li>Bonus : afficher les livres publi\u00e9s apr\u00e8s 2000</li> </ul> </li>"},{"location":"sequences/s1/fondamentaux/poo/#exemple-attendu","title":"Exemple attendu","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        Author rowling = new Author(\"J.K. Rowling\", \"UK\");\n        Author orwell = new Author(\"George Orwell\", \"UK\");\n        Author murakami = new Author(\"Haruki Murakami\", \"Japan\");\n\n        Book hp = new Book(\"Harry Potter\", rowling, 1997);\n        Book nineteenEightyFour = new Book(\"1984\", orwell, 1949);\n        Book kafka = new Book(\"Kafka on the Shore\", murakami, 2002);\n\n        Library myLibrary = new Library(\"City Library\");\n        myLibrary.addBook(hp);\n        myLibrary.addBook(nineteenEightyFour);\n        myLibrary.addBook(kafka);\n\n        myLibrary.displayBooks();\n        myLibrary.findBooksByAuthor(\"Haruki Murakami\");\n        myLibrary.displayBooksAfterYear(2000); // Bonus\n    }\n}\n</code></pre> <p>Pour vous aider, voici la documentation officielle de Java sur la POO :</p> <ul> <li>Classes et objets</li> <li>Packages</li> </ul>"},{"location":"sequences/s1/positionnement/","title":"Test de positionnement","text":"<p>Avant de commencer ce cours, nous vous proposons un petit test de positionnement. Il comprend des questions de diff\u00e9rents niveaux de difficult\u00e9 \u00e0 travers 50 questions sur Java, Java Spring et Docker. Vous avez 1h pour le compl\u00e9ter. Chaque question rapporte 1 point. A la fin du test, vous obtiendrez un score sur 50. Si vous obtenez un score sup\u00e9rieur ou \u00e9gal \u00e0 40, vous pouvez passer directement au module 2 m\u00eame si nous vous le d\u00e9conseillons.</p> <p>Ce test n'est pas not\u00e9 et n'a pas d'impact sur votre progression dans le cours. Il est l\u00e0 pour vous aider \u00e0 \u00e9valuer votre niveau et \u00e0 identifier les domaines dans lesquels vous pourriez avoir besoin de vous am\u00e9liorer.</p> <p>\u26a0\ufe0f Ce test est \u00e0 faire une seule fois. Si vous le refaites, votre score ne sera pas pris en compte. Bonne chance !</p> <p>Acc\u00e9der au formulaire de positionnement</p>"},{"location":"sequences/s2/docker/","title":"Docker","text":"<p>docker course</p>"}]}